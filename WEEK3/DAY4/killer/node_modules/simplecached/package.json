{
  "name": "simplecached",
  "version": "0.0.3",
  "description": "Simplified memcached server.",
  "homepage": "https://github.com/alexfernandez/simplecached",
  "contributors": [
    {
      "name": "Alex Fern√°ndez",
      "email": "alexfernandeznpm@gmail.com"
    }
  ],
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/alexfernandez/simplecached"
  },
  "dependencies": {
    "prototypes": "*",
    "testing": "*",
    "optimist": "~0.6.0",
    "log": "*"
  },
  "keywords": [
    "simplecached",
    "didactic",
    "memcached",
    "caching",
    "server"
  ],
  "engines": {
    "node": "*"
  },
  "bin": {
    "simplecached": "bin/server.js"
  },
  "scripts": {
    "test": "node test.js"
  },
  "private": false,
  "readme": "[![Build Status](https://secure.travis-ci.org/alexfernandez/simplecached.png)](http://travis-ci.org/alexfernandez/simplecached)\n\n# simplecached\n\nSimplified version of memcached, useful for didactic purposes.\n\n## Installation\n\nJust run:\n\n    npm install simplecached\n\nor add it to your dependencies in package.json:\n\n    \"dependencies\": {\n        \"simplecached\": \"*\",\n        ...\n    },\n\n## Server\n\nTo start a server, just require simplecached and create a server:\n\n    var simplecached = require('simplecached');\n    var server = new simplecached.Server();\n\nTo start the server on a port different than the default (11311),\nadd it to the Server constructor:\n\n    var server = simplecached.Server(port);\n\nAlso a callback can be added to be notified when the server has started:\n\n    var server = simplecached.Server(port, function(error, result) {\n        console.log('Server started');\n    });\n\nTo stop the server, call close() on it:\n\n    server.close();\n\n## Client\n\nTo create a client for a simplecached server, just create it.\n\n    var simplecached = require('simplecached');\n    var client = new simplecached.Client();\n\n### new Client(options, callback);\n\nThe client constructor accepts an options object with port and host.\nAlso, an optional callback can be added to be notified when the client is connected.\n\n    var options = {\n        port: 11312,\n        host: '192.168.1.15'\n    };\n    var client = new simplecached.Client(options, function(error) {\n        console.log('Connected');\n    });\n\nThe following functions can be called on the client.\n\n### client.get(key, callback);\n\nGet a key from the remote simplecached.\nThe callback is a `function(error, result)` that will be called either with an error or the result,\nor null if the value was not found.\n\n### client.set(key, value, callback);\n\nSet a value into the remote simplecached.\nThe callback is a `function(error, result)` that will be called with an error or a result.\nThe `result` can be true if the value was stored, false otherwise.\n\n### client.delete(key, callback);\n\nDelete a value from the remote simplecached.\nThe callback is a `function(error, result)` that will be called with an error or a result.\nThe `result` can be true if the value was deleted, false if not found.\n\n### client.close(callback);\n\nClose the connection. The optional callback will be called after the connection is actually closed.\n\n### Example\n\nThe following code opens a connection to a remote simplecached server.\nThen it sets a key, retrieves it and checks that the value is correct.\nThen it closes the connection.\n\n    var simplecached = require('simplecached');\n    var options = {\n        port: 11312,\n        host: '192.168.1.15'\n    };\n    var client = new client.Client(options, function(error) {\n        console.assert(!error, 'Could not open connection');\n        var key = 'testing';\n        var value = 'real value';\n        client.set(key, value, function(error, result) {\n            console.assert(!error, 'Error setting key');\n            console.assert(result, 'Could not set key');\n            client.get(key, function(error, result) {\n                console.assert(!error, 'Error getting key');\n                console.assert(result == value, 'Invalid get key');\n                client.delete(key, function(error, result) {\n                    console.assert(!error, 'Error deleting key');\n                    console.assert(result, 'Could not delete key');\n                    client.close(function(error) {\n                        console.assert(!error, 'Error closing client');\n                    });\n                });\n            });\n        });\n    });\n\nThe pyramid of callbacks can be avoided with a few named functions.\n\n## Protocol\n\nThe line protocol for simplecached is a simplified version of memcached's.\n\n### `get <key>\\r\\n`\n\nGets a key from the cache. The response can be either:\n\n    VALUE <value>\\r\\n\n\nwhen a value is found, or\n\n    END\\r\\n\n\nif the value was not found.\n\n### `set <key> <value>\\r\\n`\n\nSets a value in the cache, always a string (without line feeds).\nThe response can be either:\n\n    STORED\\r\\n\n\nif the value was stored, or\n\n    NOT_STORED\\r\\n\n\notherwise.\n\n### `delete <key>\\r\\n`\n\nDeletes a value from the cache.\nThe response can be either:\n\n    DELETED\\r\\n\n\nif the value was stored, or\n\n    NOT_FOUND\\r\\n\n\notherwise.\n\n### `quit\\r\\n`\n\nClose the connection.\n\n## License\n\nSimplecached is licensed under the MIT license.\nPlease consult the LICENSE file for details.\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/alexfernandez/simplecached/issues"
  },
  "_id": "simplecached@0.0.3",
  "dist": {
    "shasum": "834eeb4b1b0d29c84f918f05da32e34df4d9313f"
  },
  "_from": "simplecached@",
  "_resolved": "https://registry.npmjs.org/simplecached/-/simplecached-0.0.3.tgz"
}
